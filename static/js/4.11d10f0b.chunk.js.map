{"version":3,"sources":["components/pokemonList/lists/Lists.js"],"names":["withRouter","props","dispatch","useDispatch","pokemonLists","useSelector","state","pokemonList","list","filteredPokemonList","filterList","loading","useState","filterName","setFilterName","isUnmount","useRef","useEffect","current","actions","match","params","id","unFilteredList","Fragment","className","map","p","key","name","to","type","value","onChange","e","target"],"mappings":"oMA8EeA,sBAxED,SAAAC,GACZ,IAAMC,EAAWC,cAEXC,EAAeC,YAAY,SAAAC,GAAK,OAAIA,EAAMC,YAAYC,OAEtDC,EAAsBJ,YAAY,SAAAC,GAAK,OAAIA,EAAMC,YAAYG,aAE7DC,EAAUN,YAAY,SAAAC,GAAK,OAAIA,EAAMC,YAAYI,UAPlC,EASeC,mBAAS,IATxB,mBASdC,EATc,KASFC,EATE,KAUfC,EAAYC,kBAAO,GAGzBC,oBAAU,WAER,OAAO,WACLF,EAAUG,SAAU,IAErB,IAGHD,oBAAU,WACJF,EAAUG,SAAShB,EAASiB,IAAuBlB,EAAMmB,MAAMC,OAAOC,MAEzE,CAACrB,EAAMmB,MAAMC,OAAOC,GAAIpB,IAG3Be,oBAAU,WAELf,EADAW,EACSM,IAA0BN,GAE3BM,QAEV,CAACN,EAAYX,IAEhB,IAAMqB,EAAiBnB,EACrB,kBAAC,IAAMoB,SAAP,KACE,wBAAIC,UAAU,eACXrB,EAAasB,IAAI,SAAAC,GAChB,OACE,wBAAIC,IAAKD,EAAEE,KAAMJ,UAAU,eACzB,kBAAC,IAAD,CAAMA,UAAU,cAAcK,GAAE,WAAMH,EAAEE,OAASF,EAAEE,WAM3D,KAEErB,EAAOC,EACX,kBAAC,IAAMe,SAAP,KACE,wBAAIC,UAAU,eACXhB,EAAoBiB,IAAI,SAAAC,GACvB,OACE,wBAAIC,IAAKD,EAAEE,KAAMJ,UAAU,eACzB,kBAAC,IAAD,CAAMA,UAAU,cAAcK,GAAE,WAAMH,EAAEE,OAASF,EAAEE,WAO3DN,EAEJ,OACE,yBAAKE,UAAU,UACTd,GAAW,2BAAOoB,KAAK,OAAON,UAAU,eAAeO,MAAOnB,EAAYoB,SAAU,SAAAC,GAAC,OAAIpB,EAAcoB,EAAEC,OAAOH,UACjHrB,EAAU,kBAAC,IAAD,MAAaH","file":"static/js/4.11d10f0b.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter, Link } from 'react-router-dom';\nimport * as actions from '../../../store/actions/index';\nimport Loader from '../../loader/Loader';\n\nconst Lists = props => {\n  const dispatch = useDispatch();\n\n  const pokemonLists = useSelector(state => state.pokemonList.list);\n\n  const filteredPokemonList = useSelector(state => state.pokemonList.filterList);\n\n  const loading = useSelector(state => state.pokemonList.loading)\n\n  const [filterName, setFilterName] = useState('');\n  const isUnmount = useRef(false);\n\n  // Cancels get request upon unmount\n  useEffect(() => {\n\n    return () => {\n      isUnmount.current = true;\n    }\n  }, [])\n\n  // Gets pokemon list\n  useEffect(() => {\n    if(!isUnmount.current) dispatch(actions.getPokemonList(props.match.params.id));\n\n  }, [props.match.params.id, dispatch])\n\n  // Filter Pokemon List\n  useEffect(() => {\n    if(filterName) {\n       dispatch(actions.pokemonListFilter(filterName)) \n    } else {\n      dispatch(actions.pokemonListClearFilter()) \n    }\n  }, [filterName, dispatch])\n\n  const unFilteredList = pokemonLists ? (\n    <React.Fragment>\n      <ul className=\"Lists__list\">\n        {pokemonLists.map(p => {\n          return (\n            <li key={p.name} className=\"Lists__item\">\n              <Link className=\"Lists__link\" to={`/${p.name}`}>{p.name}</Link>\n            </li>\n            )\n        })}\n      </ul>\n    </React.Fragment>\n  ) : null;\n\n  const list = filteredPokemonList ? (\n    <React.Fragment>\n      <ul className=\"Lists__list\">\n        {filteredPokemonList.map(p => {\n          return (\n            <li key={p.name} className=\"Lists__item\">\n              <Link className=\"Lists__link\" to={`/${p.name}`}>{p.name}</Link>\n            </li>\n            )\n        })}\n      </ul>\n    </React.Fragment>\n\n  ) : unFilteredList\n\n  return ( \n    <div className=\"Lists\">\n        {!loading && <input type=\"text\" className=\"Lists__input\" value={filterName} onChange={e => setFilterName(e.target.value)}/>}\n        {loading ? <Loader /> : list}\n    </div>\n   );\n}\n \nexport default withRouter(Lists);"],"sourceRoot":""}